!function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/webpack/",t(t.s=820)}({0:function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},820:function(n,e,t){n.exports=t(821)},821:function(n,e,t){"use strict";t(0)(t(822))},822:function(n,e){n.exports="/*\n * amplitude.js\n * Javascript SDK for Amplitude\n *\n * This script has been modified by Spotify to include support for changing\n * the API endpoint.\n *\n * Created by Curtis Liu\n * Copyright (c) 2014 Sonalight, Inc. All rights reserved.\n */\n(function(window, document) {\n\n    var NAMESPACE = 'spAnalytics';\n\n    var log = function(s) {\n        console.log(NAMESPACE + ' ' + s);\n    };\n\n    /*\n     * Checks if an object is an array\n     */\n    var isArray = Array.isArray || function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /*\n     * Converts a dictionary into a url safe query string\n     */\n    var queryString = function(p) {\n        var pairs = []\n        for (var key in p) {\n            var value = p[key];\n            if (isArray(value)) {\n                for (var i = 0; i < value.length; i++) {\n                    pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value[i]));\n                }\n            } else {\n                pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n            }\n        }\n        return pairs.join('&');\n    };\n\n    /*\n     * Returns a random 128-bit string in hex (32 hex digits)\n     */\n    var UUID = function() {\n        var s = [];\n        for (var i = 0; i < 32; i++) {\n            s[i] = Math.floor(Math.random() * 16).toString(16);\n        }\n        var uuid = s.join('');\n        return uuid;\n    };\n\n    /*\n     * UTF-8 encoder/decoder\n     * http://www.webtoolkit.info/\n     */\n    var UTF8 = {\n        encode: function (s) {\n            s = s.replace(/\\r\\n/g,'\\n');\n            var utftext = '';\n\n            for (var n = 0; n < s.length; n++) {\n                var c = s.charCodeAt(n);\n\n                if (c < 128) {\n                    utftext += String.fromCharCode(c);\n                }\n                else if((c > 127) && (c < 2048)) {\n                    utftext += String.fromCharCode((c >> 6) | 192);\n                    utftext += String.fromCharCode((c & 63) | 128);\n                }\n                else {\n                    utftext += String.fromCharCode((c >> 12) | 224);\n                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                    utftext += String.fromCharCode((c & 63) | 128);\n                }\n            }\n            return utftext;\n        },\n\n        decode: function (utftext) {\n            var s = '';\n            var i = 0;\n            var c = 0, c1 = 0, c2 = 0;\n\n            while ( i < utftext.length ) {\n                c = utftext.charCodeAt(i);\n                if (c < 128) {\n                    s += String.fromCharCode(c);\n                    i++;\n                }\n                else if((c > 191) && (c < 224)) {\n                    c1 = utftext.charCodeAt(i+1);\n                    s += String.fromCharCode(((c & 31) << 6) | (c1 & 63));\n                    i += 2;\n                }\n                else {\n                    c1 = utftext.charCodeAt(i+1);\n                    c2 = utftext.charCodeAt(i+2);\n                    s += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));\n                    i += 3;\n                }\n            }\n            return s;\n        }\n    };\n\n    /*\n     * Base64 encoder/decoder\n     * http://www.webtoolkit.info/\n     */\n    var Base64 = {\n        _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\n        encode: function (input) {\n            try {\n                if (window.btoa && window.atob) {\n                    return window.btoa(unescape(encodeURIComponent(input)));\n                }\n            } catch (e) {\n                //log(e);\n            }\n            return Base64._encode(input);\n        },\n\n        _encode: function (input) {\n            var output = '';\n            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n            var i = 0;\n\n            input = UTF8.encode(input);\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) +\n                    Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);\n            }\n            return output;\n        },\n\n        decode: function (input) {\n            try {\n                if (window.btoa && window.atob) {\n                    return decodeURIComponent(escape(window.atob(input)));\n                }\n            } catch (e) {\n                //log(e);\n            }\n            return Base64._decode(input);\n        },\n\n        _decode: function (input) {\n            var output = '';\n            var chr1, chr2, chr3;\n            var enc1, enc2, enc3, enc4;\n            var i = 0;\n\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = Base64._keyStr.indexOf(input.charAt(i++));\n                enc2 = Base64._keyStr.indexOf(input.charAt(i++));\n                enc3 = Base64._keyStr.indexOf(input.charAt(i++));\n                enc4 = Base64._keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 != 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 != 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n            output = UTF8.decode(output);\n            return output;\n        }\n    };\n\n    var userAgent = window.navigator.userAgent;\n    var vendor = window.navigator.vendor;\n    var platform = window.navigator.platform;\n\n    /*\n     * Browser/OS detection\n     * @TODO this is yet another implementation of browser detection. Try to figure out standard Spotify way?\n     */\n    var BrowserDetect = {\n        init: function() {\n            this.browser = this.searchString(this.dataBrowser) || null;\n            this.version = this.searchVersion(window.navigator.userAgent) ||\n                this.searchVersion(window.navigator.appVersion) || null;\n            this.OS = this.searchString(this.dataOS) || null;\n        },\n        searchString: function(data) {\n            for (var i=0; i<data.length; i++) {\n                var dataString = data[i].string;\n                var dataProp = data[i].prop;\n                this.versionSearchString = data[i].versionSearch || data[i].identity;\n                if (dataString) {\n                    if (dataString.indexOf(data[i].subString) != -1) {\n                        return data[i].identity;\n                    }\n                }\n                else if (dataProp) {\n                    return data[i].identity;\n                }\n            }\n        },\n        searchVersion: function(dataString) {\n            var index = dataString.indexOf(this.versionSearchString);\n            if (index == -1) {\n                return;\n            }\n            return parseFloat(dataString.substring(index + this.versionSearchString.length+1));\n        },\n        dataBrowser: [\n            {\n                string: userAgent,\n                subString: 'Chrome',\n                identity: 'Chrome'\n            },\n            {\n                string: userAgent,\n                subString: 'OmniWeb',\n                versionSearch: 'OmniWeb/',\n                identity: 'OmniWeb'\n            },\n            {\n                string: vendor,\n                subString: 'Apple',\n                identity: 'Safari',\n                versionSearch: 'Version'\n            },\n            {\n                prop: window.opera,\n                identity: 'Opera',\n                versionSearch: 'Version'\n            },\n            {\n                string: vendor,\n                subString: 'iCab',\n                identity: 'iCab'\n            },\n            {\n                string: vendor,\n                subString: 'KDE',\n                identity: 'Konqueror'\n            },\n            {\n                string: userAgent,\n                subString: 'Firefox',\n                identity: 'Firefox'\n            },\n            {\n                string: vendor,\n                subString: 'Camino',\n                identity: 'Camino'\n            },\n            {   // for newer Netscapes (6+)\n                string: userAgent,\n                subString: 'Netscape',\n                identity: 'Netscape'\n            },\n            {\n                string: userAgent,\n                subString: 'MSIE',\n                identity: 'Explorer',\n                versionSearch: 'MSIE'\n            },\n            {\n                string: userAgent,\n                subString: 'Gecko',\n                identity: 'Mozilla',\n                versionSearch: 'rv'\n            },\n            {   // for older Netscapes (4-)\n                string: userAgent,\n                subString: 'Mozilla',\n                identity: 'Netscape',\n                versionSearch: 'Mozilla'\n            }\n        ],\n        dataOS : [\n            {\n                string: platform,\n                subString: 'Win',\n                identity: 'Windows'\n            },\n            {\n                string: platform,\n                subString: 'Mac',\n                identity: 'Mac'\n            },\n            {\n                string: userAgent,\n                subString: 'iPhone',\n                identity: 'iPhone/iPod'\n            },\n            {\n                string: userAgent,\n                subString: 'Android',\n                identity: 'Android'\n            },\n            {\n                string: platform,\n                subString: 'Linux',\n                identity: 'Linux'\n            }\n        ]\n\n    };\n    BrowserDetect.init();\n\n    /*\n     * Simple AJAX request object\n     */\n    var Request = function(url, data) {\n        this.url = url;\n        this.data = data || {};\n    };\n\n    Request.prototype.send = function(callback, error) {\n        var isIE = window.XDomainRequest ? true : false;\n        if (isIE) {\n            var xdr = new window.XDomainRequest();\n            xdr.open('POST', this.url, true);\n            xdr.onload = function() {\n                callback(xdr.responseText);\n            };\n            xdr.onerror = function() {\n                error(xdr);\n            };\n            xdr.send(queryString(this.data));\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', this.url, true);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        callback(xhr.responseText);\n                    } else {\n                        error(xhr, xhr.status);\n                    }\n                }\n            }\n            xhr.onerror = function() {\n                error(xhr, xhr.status);\n            };\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n            xhr.send(queryString(this.data));\n        }\n        //log('sent request to ' + this.url + ' with data ' + decodeURIComponent(queryString(this.data)));\n    };\n\n    /*\n     * Cookie data\n     */\n    var Cookie = {\n        get: function(name) {\n            var nameEq = name + '=';\n            var ca = document.cookie.split(';');\n            for (var i = 0; i < ca.length; i++) {\n                var c = ca[i];\n                while (c.charAt(0) == ' ') {\n                    c = c.substring(1, c.length);\n                }\n                if (c.indexOf(nameEq) == 0) {\n                    return c.substring(nameEq.length, c.length);\n                }\n            }\n            return null;\n        },\n        set: function(name, value, days, domain) {\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n                var expires = '; expires=' + date.toGMTString();\n            } else {\n                var expires = '';\n            }\n            var cookieString = name + '=' + value + expires + '; path=/' + (domain ? (\";domain=\" + domain) : \"\");\n            document.cookie = cookieString;\n        },\n        remove: function(name, domain) {\n            Cookie.set(name, '', -1, domain);\n        }\n    };\n\n    /*\n     * Amplitude API\n     */\n    var Amplitude = function() {};\n    //Amplitude.SDK_VERSION = \"1.3\";\n    //Amplitude.API_VERSION = 2;\n\n    var options = {\n        apiEndpoint: '', // changed by Spotify, no apiEndpoint by default\n        cookieName: NAMESPACE + '_id',\n        cookieExpiration: 365 * 10,\n        unsentKey: NAMESPACE + '_unsent',\n        saveEvents: true,\n        domain: '',\n        sessionTimeout: 30 * 60 * 1000\n    };\n\n    var eventId = 0;\n    var unsentEvents = [];\n    var sending = false;\n    var lastEventTime = null;\n    var sessionId = null;\n    var LocalStorageKeys = {\n        LAST_EVENT_TIME: NAMESPACE + '_lastEventTime',\n        SESSION_ID: NAMESPACE + '_sessionId'\n    };\n\n    var nextEventId = function() {\n        eventId++;\n        return eventId;\n    };\n\n    /**\n     * Initializes Amplitude.\n     * opt_userId An identifier for this user\n     * opt_config Configuration options\n     *   - saveEvents (boolean) Whether to save events to local storage. Defaults to true.\n     */\n    Amplitude.prototype.init = function(opt_userId, opt_config) {\n        try {\n            this.options = options;\n            if (opt_config) {\n                if (opt_config.saveEvents !== undefined) {\n                    options.saveEvents = !!opt_config.saveEvents;\n                }\n            }\n\n            loadCookieData();\n\n            options.deviceId = (opt_config && opt_config.deviceId !== undefined && opt_config.deviceId !== null && opt_config.deviceId) ||\n                options.deviceId || UUID();\n            options.userId = (opt_userId !== undefined && opt_userId !== null && opt_userId) || options.userId || null;\n            // Added by Spotify: make it possible to configure the API endpoint\n            options.apiEndpoint = (opt_config && opt_config.apiEndpoint !== undefined && opt_config.apiEndpoint !== null) && opt_config.apiEndpoint ||\n                options.apiEndpoint;\n            saveCookieData();\n\n            //opt_userId !== undefined && opt_userId !== null && log('initialized with userId=' + opt_userId);\n            eventId = 0;\n\n            if (options.saveEvents) {\n                var savedUnsentEventsString = localStorage.getItem(options.unsentKey);\n                if (savedUnsentEventsString) {\n                    try {\n                        unsentEvents = JSON.parse(savedUnsentEventsString);\n                    } catch (e) {\n                        //log(e);\n                    }\n                }\n            }\n            if (unsentEvents.length > 0) {\n                this.sendEvents();\n            }\n\n            lastEventTime = parseInt(localStorage.getItem(LocalStorageKeys.LAST_EVENT_TIME)) || null;\n            sessionId = parseInt(localStorage.getItem(LocalStorageKeys.SESSION_ID)) || null;\n            var now = new Date().getTime();\n            if (!sessionId || !lastEventTime || now - lastEventTime > options.sessionTimeout) {\n                sessionId = now;\n                localStorage.setItem(LocalStorageKeys.SESSION_ID, sessionId);\n            }\n            lastEventTime = now;\n            localStorage.setItem(LocalStorageKeys.LAST_EVENT_TIME, lastEventTime);\n        } catch (e) {\n            log(e);\n        }\n    };\n\n    var loadCookieData = function() {\n        var cookie = Cookie.get(options.cookieName);\n        var cookieData = null;\n        if (cookie) {\n            try {\n                cookieData = JSON.parse(Base64.decode(cookie));\n                if (cookieData) {\n                    if (cookieData.deviceId) {\n                        options.deviceId = cookieData.deviceId;\n                    }\n                    if (cookieData.userId) {\n                        options.userId = cookieData.userId;\n                    }\n                    if (cookieData.globalUserProperties) {\n                        options.globalUserProperties = cookieData.globalUserProperties;\n                    }\n                }\n            } catch (e) {\n                //log(e);\n            }\n        }\n    };\n\n    var saveCookieData = function() {\n        Cookie.set(options.cookieName, Base64.encode(JSON.stringify({\n            deviceId: options.deviceId,\n            userId: options.userId,\n            globalUserProperties: options.globalUserProperties\n        })), options.cookieExpiration, options.domain);\n    };\n\n    var saveEvents = function() {\n        try {\n            localStorage.setItem(options.unsentKey, JSON.stringify(unsentEvents));\n        } catch (e) {\n            //log(e);\n        }\n    };\n\n    Amplitude.prototype.setDomain = function(domain) {\n        try {\n            options.domain = (domain !== undefined && domain !== null && ('' + domain)) || null;\n            options.cookieName = NAMESPACE + '_id' + (options.domain || '');\n            loadCookieData();\n            saveCookieData();\n            //log('set domain=' + domain);\n        } catch (e) {\n            log(e);\n        }\n    };\n\n    Amplitude.prototype.setUserId = function(userId) {\n        try {\n            options.userId = (userId !== undefined && userId !== null && ('' + userId)) || null;\n            saveCookieData();\n            //log('set userId=' + userId);\n        } catch (e) {\n            log(e);\n        }\n    };\n\n    Amplitude.prototype.setUserProperties = function(userProperties) {\n        try {\n            options.globalUserProperties = userProperties;\n            saveCookieData();\n            //log('set userProperties=' + JSON.stringify(userProperties));\n        } catch (e) {\n            log(e);\n        }\n    };\n\n    Amplitude.prototype.setVersionName = function(versionName) {\n        try {\n            options.versionName = versionName;\n            //log('set versionName=' + versionName);\n        } catch (e) {\n            log(e);\n        }\n    };\n\n    Amplitude.prototype.logEvent = function(eventCategory, eventAction, eventLabel, eventContext) {\n        try {\n            var eventTime = new Date().getTime();\n            if (!sessionId || !lastEventTime || eventTime - lastEventTime > options.sessionTimeout) {\n                sessionId = eventTime;\n                localStorage.setItem(LocalStorageKeys.SESSION_ID, sessionId);\n            }\n            lastEventTime = eventTime;\n            localStorage.setItem(LocalStorageKeys.LAST_EVENT_TIME, lastEventTime);\n            if(eventContext && typeof eventContext != 'string') {\n                eventContext = JSON.stringify(eventContext);\n            } else {\n                eventContext = eventContext || \"\";\n            }\n            var event = {\n                device_id: options.deviceId,\n                user_id: options.userId || options.deviceId,\n                timestamp: eventTime,\n                event_id: nextEventId(),\n                session_id: sessionId || -1,\n                event_category: eventCategory,\n                event_action: eventAction,\n                event_label: eventLabel,\n                event_context: eventContext,\n                // api_properties: {\n                // location: this.getLocation()\n                // },\n                client: BrowserDetect.browser,\n                version_code: 0,\n                version_name: options.versionName || null,\n                build_version_sdk: 0,\n                build_version_release: BrowserDetect.version,\n                // phone_manufacturer: null,\n                // phone_brand: null,\n                phone_model: BrowserDetect.OS,\n                global_properties: options.globalUserProperties || {}\n                // country: null,\n                // language: null,\n                // phone_carrier: null\n            };\n            unsentEvents.push(event);\n            if (options.saveEvents) {\n                saveEvents();\n            }\n            //log('logged eventCategory=' + eventCategory + ', properties=' + JSON.stringify(eventProperties));\n            this.sendEvents();\n        } catch (e) {\n            log(e);\n        }\n    };\n\n    Amplitude.prototype.sendEvents = function() {\n        if (!sending) {\n            sending = true;\n            // Changed by Spotify to be the true endpoint URL\n            var url = options.apiEndpoint;\n            var events = JSON.stringify(unsentEvents);\n            var uploadTime = new Date().getTime();\n            var data = {\n                e: events,\n                upload_time: uploadTime\n            };\n            var numEvents = unsentEvents.length;\n            var scope = this;\n            new Request(url, data).send(function(response) {\n                sending = false;\n                try {\n                    var responseData = JSON.parse(response);\n                    if (responseData && responseData['success'] == true) {\n                        //log('sucessful upload');\n                        if (unsentEvents.length > 0) {\n                            scope.sendEvents();\n                        }\n                    }\n                } catch (e) {\n                    //log('failed upload');\n                }\n            }, function() {\n                //error\n                sending = false;\n            });\n\n            // TEMP as an experiment to see how this library performs\n            // without retrys, remove local cache no matter what\n            // (instead of successful upload block above)\n            unsentEvents.splice(0, numEvents);\n            if (options.saveEvents) {\n                saveEvents();\n            }\n        }\n    };\n\n    Amplitude.prototype.runQueuedFunctions = function () {\n        for (var i = 0; i < this._q.length; i++) {\n            var fn = this[this._q[i][0]];\n            if (fn && typeof fn === 'function') {\n                fn.apply(this, this._q[i].slice(1));\n            }\n        }\n        this._q = []; // clear function queue after running\n    };\n\n    Amplitude.prototype.__VERSION__ = '1.3';\n\n    var old = window[NAMESPACE] || {};\n    var instance = new Amplitude();\n    instance._q = old._q || [];\n\n    window[NAMESPACE] = instance;\n\n})(window, document)\n"}});
//# sourceMappingURL=sp-analytics.01d50a610ba7f78cb1da.js.map